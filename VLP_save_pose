#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Dec 16 15:59:34 2021

@author: songming
"""

import open3d as o3d
import numpy as np
import copy
import os
import time

def remove_ground(o3d_pcd):
    
    ##The two key arguments radius = 0.1 and max_nn = 30 specifies search radius and maximum nearest neighbor. 
    ##It has 10cm of search radius, and only considers up to 30 neighbors to save computation time.
    
    
    points = np.asarray(o3d_pcd.points)
    
    o3d_pcd.estimate_normals(search_param=o3d.geometry.KDTreeSearchParamHybrid(radius=5.0, max_nn=10))
    
    normals = np.asarray(o3d_pcd.normals)
   
    angular_distance_to_z = np.abs(normals[:, 2])
    
    # angles range along the vertical axis (0, pi/6) normal direction constraint
    
    idx_downsampled = angular_distance_to_z > np.cos(np.pi/5) 
    
    idx_points = points[:, 2] < -1.4
    
    idx_2 = np.logical_and(idx_downsampled, idx_points)
    
    idx_2_not = np.logical_not(idx_2)
    
    ground_points = points[idx_2]
    
    up_points = points[idx_2_not] 
        
    o3d_ground_cloud = o3d.geometry.PointCloud(o3d.utility.Vector3dVector(ground_points))
    
    # o3d_up_cloud = o3d.geometry.PointCloud(o3d.utility.Vector3dVector(up_points))
    ## increase the distance to incorporate more ground points
    plane_model, inliers = o3d_ground_cloud.segment_plane(distance_threshold=0.3,
                                      ransac_n=3,
                                      num_iterations=30)
    # [a, b, c, d] = plane_model
    # print(f" Ground plane equation: {a:.2f}x + {b:.2f}y + {c:.2f}z + {d:.2f} = 0")
    
    ground_cloud = o3d_ground_cloud.select_by_index(inliers)
    ground_cloud.paint_uniform_color([1.0, 0, 0])
    
    ground_outlier_cloud =  o3d_ground_cloud.select_by_index(inliers, True)
    
    # ground_outlier.paint_uniform_color([0,0,1])
    
    # o3d_up_points.paint_uniform_color([0,0,1])
    
    ground_outlier_points = np.asarray(ground_outlier_cloud.points)
    
    ground_free_points = np.concatenate((ground_outlier_points,up_points), axis=0)
    
    ground_free_cloud = o3d.geometry.PointCloud(o3d.utility.Vector3dVector(ground_free_points))
    
    return ground_free_cloud    

def pairwise_registration(source, target, voxel_size):
    
    max_correspondence_distance_coarse = voxel_size * 15
    max_correspondence_distance_fine = voxel_size * 1.5
    
    target.estimate_normals(search_param=o3d.geometry.KDTreeSearchParamHybrid(radius= voxel_size*2, max_nn=30))
    
    print("Apply point-to-plane ICP")
    icp_coarse = o3d.pipelines.registration.registration_icp(
        source, target, max_correspondence_distance_coarse, np.identity(4),
        o3d.pipelines.registration.TransformationEstimationPointToPlane())
    
    icp_fine = o3d.pipelines.registration.registration_icp(
        source, target, max_correspondence_distance_fine,
        icp_coarse.transformation,
        o3d.pipelines.registration.TransformationEstimationPointToPlane())
    
    transformation_icp = icp_fine.transformation
    
    information_icp = o3d.pipelines.registration.get_information_matrix_from_point_clouds(
        source, target, max_correspondence_distance_fine,
        icp_fine.transformation)
    
    return transformation_icp, information_icp

def full_registration(pcds):
    pose_graph = o3d.pipelines.registration.PoseGraph()
    odometry = np.identity(4)
    pose_graph.nodes.append(o3d.pipelines.registration.PoseGraphNode(odometry))
    n_pcds = len(pcds)
    for source_id in range(n_pcds):
        for target_id in range(source_id + 1, n_pcds): # range(source_id + 1, source_id + 10)
        # range(source_id + 1, n_pcds)
            transformation_icp, information_icp = pairwise_registration(
                pcds[source_id], pcds[target_id],voxel_size)
            print("Build o3d.registration.PoseGraph")
            if target_id == source_id + 1:  # odometry case
                odometry = np.dot(transformation_icp, odometry)
                pose_graph.nodes.append(
                    o3d.pipelines.registration.PoseGraphNode(np.linalg.inv(odometry)))
                pose_graph.edges.append(
                    o3d.pipelines.registration.PoseGraphEdge(source_id,
                                                   target_id,
                                                   transformation_icp,
                                                   information_icp,
                                                   uncertain=False))
            else:  # loop closure case
                pose_graph.edges.append(
                    o3d.pipelines.registration.PoseGraphEdge(source_id,
                                                   target_id,
                                                   transformation_icp,
                                                   information_icp,
                                                   uncertain=True))
    return pose_graph


   
APP_FOLDER = '/home/songming/Music/ls2n_dataset/'


for base, dirs, files in os.walk(APP_FOLDER):
    if base == APP_FOLDER:
        continue
    list = os.listdir(base)
    # print(base)
    number_files = len(list)
    pcds =[]
    
    # print(number_files)
    for i in range(number_files):
      
        voxel_size =0.2
        # print(base + "/%d.txt"%i)
        pcd = o3d.io.read_point_cloud(base + "/%d.txt"%i, format='xyz')
        gf_pcd = remove_ground(pcd)
        pcd_down = gf_pcd.voxel_down_sample(voxel_size = voxel_size)     
        pcds.append(pcd_down)
    
    with o3d.utility.VerbosityContextManager(
            o3d.utility.VerbosityLevel.Debug) as cm:
        pose_graph = full_registration(pcds)
        
    option = o3d.pipelines.registration.GlobalOptimizationOption(
        max_correspondence_distance=voxel_size*1.5,
        edge_prune_threshold=0.25,
        reference_node=0)
    
    with o3d.utility.VerbosityContextManager(
            o3d.utility.VerbosityLevel.Debug) as cm:
        o3d.pipelines.registration.global_optimization(
            pose_graph,
            o3d.pipelines.registration.GlobalOptimizationLevenbergMarquardt(),
            o3d.pipelines.registration.GlobalOptimizationConvergenceCriteria(),
            option)
        
    o3d.io.write_pose_graph( base + '.json', pose_graph)
    
    
# vis = o3d.visualization.Visualizer()
# vis.create_window(window_name='Ls2n', width=1853, height=1052)


# render_option = vis.get_render_option()
# render_option.point_size = 1
# render_option.background_color = np.asarray([0, 0, 0])  
# render_option.line_width = 2
    
# for base, dirs, files in os.walk(APP_FOLDER):
#     if base == APP_FOLDER:
#         continue
#     list = os.listdir(base)
#     number_files = len(list)
#     pose_graph = o3d.io.read_pose_graph(base + '.json')

#     for point_id in range(number_files):
        
#         tic = time.time()
        
#         pcd = o3d.io.read_point_cloud(base + "/%d.txt"%point_id, format='xyz')
        
#         pcd.transform(pose_graph.nodes[point_id].pose)
#         mesh = o3d.geometry.TriangleMesh.create_coordinate_frame(size=3)
#         mesh_t = copy.deepcopy(mesh).transform(pose_graph.nodes[point_id].pose)

   
#         vis.add_geometry(mesh_t)
#         vis.add_geometry(pcd)
#         # vis.add_geometry(mesh_list[point_id]) 
#         # ctr.convert_from_pinhole_camera_parameters(param)
#         vis.poll_events()
#         vis.update_renderer()
        
#         vis.capture_screen_image("/home/songming/pics/temp_%04d.jpg" % point_id)
#         time.sleep( 0.5 + tic - time.time())
        
#     vis.clear_geometries()
        
# vis.destroy_window()
        
    
    


        

        
   

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        

